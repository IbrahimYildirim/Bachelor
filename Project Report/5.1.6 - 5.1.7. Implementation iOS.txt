5.1.6 - 5.1.7. Implementation iOS

5.1.6. Chat implementation

The UI implementation for the Chat feature can be seen in the following illustration:
[INSERT FIGURE 5.1.6. Chat UI implementation - Fig.1]
For this feature, 2 components were used: an open source UI library called 'JSQMessagesViewController' and Parse (BaaS) for storing the chat messages and sending push notifications.
JSQMessagesViewController provides already customized UI components that can be combined together for building the interface. Further customization is also possible, the library offering flexibility. The base of JSQMessagesViewController is a 'UIViewController' (class provided by the Cocoa Touch framework) that manages a UICollectionView (also provided by the Cocoa Touch framework). Therefore, UICollectionViewDataSource protocol methods are used to customize the layout in addition to JSQMessagesViewController protocol methods. 
The following is the basic layout customization, which takes place after a Chat controller is visible on the device screen:
[INSERT FIGURE 5.1.6. Initial Chat UI setup - Fig.2]
The second part is the implementation of the chat logic and communication between multiple iOS apps. Parse (BaaS) is used for this purpose, with its iOS SDK. Unfortunately, the chat is not real-time, but a simulation of this is achieved by using a timer, which loads the messages for a specific event chat every 5 seconds.This is performed only when a Chat controller is visible on the screen. 
[INSERT FIGURE 5.1.6. Loading messages - Fig.3]
In order to provide a good user experience, push notifications are used for the purpose of informing the users that are attending an event that there are new messages in the event chat. The Parse iOS SDK is used for sending the push notification to all other iOS apps, except the sending one. The receiving iOS apps can open the push notification, which triggers handling that opens the Chat controller for the specific event corresponding to the push notification received. 
[INSERT FIGURE 5.1.6. Chat sending push notification - Fig.4]
The handling of opening the push notification with the correct Chat screen is based on the receiving 'eventId', which is set by the push notification sender. 
A complete flow of sending push notifications is illustrated in the following sequence diagram:
[INSERT FIGURE 5.1.6. Chat sequence diagram - Fig.5]

5.1.7. Push notifications implementation

The push notifications are implemented using Parse, a high level cloud solution that provides abstraction for sending push notifications to iOS applications. 
The base of the concept is the Apple Push Notification Service (APNs), which Apple defines as follows:
'Apple Push Notification service transports and routes a remote notification from a given provider to a given device. A notification is a short message consisting of two major pieces of data: the device token and the payload. The device token is analogous to a phone number; it contains information that enables APNs to locate the device on which the client app is installed. APNs also uses it to authenticate the routing of a notification. The payload is a JSON-defined property list that specifies how the user of an app on a device is to be alerted.'
In the following diagram, Parse is the provider, providing an out of the box setup.
[INSERT FIGURE 5.1.7. APNs structure - Fig.1]
Push notifications are used in 2 situations: for sending information to users attending an event that a new message was sent to the event chat and for sending an invitation to an event from a user to another user. 
The event chat notification is sent from an iOS device to other iOS devices, by using the Parse iOS SDK as an intermediate layer, which handles all the low level communication. 
The user invitation notification is sent from an iOS device to another iOS device, by using both the Web Service and the Parse layers. A HTTPS request is made to the Web Service, which then uses the Parse Javascript SDK for sending the notification to the corresponding iOS device. This flow can be observed in the following sequence diagram:
[INSERT FIGURE 5.1.7. Push notification sequence diagram - Fig. 2]
The opening of the push notification is handled in the iOS devices in 3 application states: application is running in background, application is running in foreground, application is not running. 
The following handles the state where the app is not running and the user taps a received push notification:
[INSERT FIGURE 5.1.7. Handling a received push notification - Fig.3]



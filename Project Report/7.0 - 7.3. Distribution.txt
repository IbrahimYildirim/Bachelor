7.0 Distribution

iOS devices users download and update their apps through Apple's AppStore. In order to publish apps in the AppStore, an enrollment in an Apple developer program is needed, which costs 99$ / year. In this project, the client provided the development team with an existing enterprise developer account, which was used for publishing.

[Fig 1 - Apple Distribution Flow]

Access to Apple's Member Center is needed. This is central point for handling app signing and creating an App ID which is required for publishing. An overview of devices, developers and apps registered to the account is available. A preview of the Member Center can be seen below:

[Fig 2 - Member Center]

7.1 Apple Member Center, Certificates & Code Signing

Code signing is a sensitive issue in Apple's ecosystem. Unlike the Android ecosystem, it is required to perform code signing in order to run an application on a physical device. In case code signing is not used, the application will run only on the iOS simulator or a Jailbroken device, which does not allow for a wide audience.

An important issue is testing on a physical device. The simulator (Xcode comes with a built-in simulator) provides excellent initial testing, but there are 3 main reasons of why testing on a physical device is important, before deploying:

	- A physical device is usually slower
	- A physical device has far less memory
	- There some APIs that work only on a physical device

In Xcode versions prior to 5.0, it was necessary to enter Member Center, register a device, create a development certificate and provisioning profile, then download that certificate, and copy it into xCode before testing on a physical device would be possible. 

The newer versions of Xcode (5.0+) made it simpler. If a project doesn't have a certificate, or the device is not added to the device list, it suggests to "fix issue" by automatically adding the device - and create a certificate if none is existing - as long as you are logged in with a valid account in Xcode.

[Fig 3 - Example of issue with provisioning profiles]


It is possible to develop apps without being enrolled in a developer program, but the only way to run and test the app would be with the iOS simulator. 

7.1.1 Provisioning Profiles & SSL Certificate for push notifications
A provisioning profile is a combination of

	- The unique App ID
	- The different certificates signed by a developer
	- List of restricted set of devices it can run on

A provisioning profile accompanies the device by being copied into Xcode and from there onto the device. While in development Xcode can generate a development provisioning profile automatically - as described earlier by "fix issue" - but at the publishing stage, it is necessary to create a production provisioning profile for the app. 

In order to enable push notifications in an app, it needs to be signed with a provisioning profile that is configured for push. In addition, the server needs to sign its communications to Apple's Push Notification Server (APNS) with a SSL certificate. In this project this is automatically handled by Parse by uploading the generated certificate to the Parse dashboard.

The provisioning profile and SSL certificate are closely tied together and only valid for a single App ID. This is a protection that ensures only signed servers can send push notifications to instances of an app that matches that profile. 

7.2 Itunes Connect
When all the code signing and provisioning profile issues are resolved, the app is ready to be published in the AppStore. Every developer or enterprise enrolled in the developer programme gain access to an iTunes account at registration.

[Fig 4 - iTunes Connect]

The iTunes Connect page handles all communication with the AppStore. Once the App ID is created in the Member Center, it is possible to create the app record and all information of the app such as

	- Screenshots
	- Description
	- Price Tier
	- Company Info
	- iTunes Logo
	- Price Tier
	- Territories for the app to be available.
	- Select build from Xcode

When the "Create new App" option is selected,  it is only possible to select the app IDs that are created in Member Center. This step must be performed before creating the app record in iTunes Connect. 

In short Member Center is the place where you handle the technical part of your app, and iTunes connect is the portal that connects your app with the App Store.

When developing apps for iOS it's not possible to get the app in a file and run it on a phone as it is with Android (unless the iPhone is jailbroken). To upload the app to the app record, the build have to be uploaded to iTunes connect from Xcode. That is done by logging in with the same account, as the app is being created by, and then you can archive the product and submit it to the app store. When that is done, it is possible to see all uploaded builds in iTunes Connect, and then it's possible to select the one to submit.

[Fig 5 Application Uploader Xcode]

7.3 Updates
The first version 2.0 (1.0 was MoveBizz, the app name changed in the update) of this app was released 1st of March 2015, date chosen by the client. The app is to be released in two versions. The first was a basic one, where the user could:

	-Create profile & login with existing
	-Create/join/delete events
	-See Events & Event Info
	-See own profile
	-Edit profile

The second version (2.1) was released one month after (1st of May 2015) and it benefits from extra functionality:

	-Push Notifications
	-Chat: with other participants in the same event (only if you attending the event)
	-Discover Function: Find other people by radius, and see their favorite sport categories & attending events. 
	-Invite other people to events
	-Public Profile

Unless there are new features added such as Push Notifications, In-App Purchases, Game-Center, etc. the update can be made only in iTunes connect. If there is a change to the app's functions (as mentioned above), it would be necessary to create the certificates in Member Center. For the first version it was necessary to create a new provisioning profile, because the "signer" of the app was not the same one as version 1.0. In the second one it was necessary to create certificates for Push-Notifications. During development, development profiles was used, and before publishing, production profiles were created.

7.4 Sales & Trends

Since the application is publicly available in the Appstore for a period of 60 days, there is a limited analytics data available. The figure below shows number of downloads from 1st February to 25th May 2015.


[Fig 6]


